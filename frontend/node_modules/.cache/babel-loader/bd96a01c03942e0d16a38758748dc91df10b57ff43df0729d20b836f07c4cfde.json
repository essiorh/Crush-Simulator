{"ast":null,"code":"var _jsxFileName = \"/app/frontend/src/components/VibrationManager.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VibrationManager = () => {\n  _s();\n  const [vibrationEnabled, setVibrationEnabled] = useState(true);\n  const [vibrationStrength, setVibrationStrength] = useState(1.0);\n  const [isVibrating, setIsVibrating] = useState(false);\n  const [supportedVibration, setSupportedVibration] = useState(false);\n\n  // Check vibration API support\n  useEffect(() => {\n    const checkVibrationSupport = () => {\n      const hasVibration = 'vibrate' in navigator;\n      setSupportedVibration(hasVibration);\n      if (hasVibration) {\n        // Test vibration capability\n        try {\n          navigator.vibrate(1); // Very short test vibration\n        } catch (error) {\n          console.log('Vibration API not fully supported');\n          setSupportedVibration(false);\n        }\n      }\n    };\n    checkVibrationSupport();\n  }, []);\n\n  // Vibrate function with pattern\n  const vibrate = (pattern, strength = 1.0) => {\n    if (!vibrationEnabled || !supportedVibration || !navigator.vibrate) return;\n    setIsVibrating(true);\n\n    // Adjust pattern intensity based on strength\n    let adjustedPattern;\n    if (Array.isArray(pattern)) {\n      adjustedPattern = pattern.map((duration, index) => {\n        // Even indices are vibration durations, odd are pauses\n        return index % 2 === 0 ? Math.round(duration * strength * vibrationStrength) : duration;\n      });\n    } else {\n      adjustedPattern = Math.round(pattern * strength * vibrationStrength);\n    }\n    try {\n      navigator.vibrate(adjustedPattern);\n\n      // Calculate total duration for state management\n      const totalDuration = Array.isArray(adjustedPattern) ? adjustedPattern.reduce((sum, val) => sum + val, 0) : adjustedPattern;\n      setTimeout(() => setIsVibrating(false), totalDuration);\n    } catch (error) {\n      console.log('Vibration failed:', error);\n      setIsVibrating(false);\n    }\n  };\n\n  // Predefined ASMR vibration patterns\n  const asmrPatterns = {\n    // Light tap sensation\n    tap: [50],\n    // Gentle pulse\n    pulse: [100, 50, 100],\n    // Crushing sensation patterns\n    can_crush: [100, 50, 200],\n    // Quick impact, pause, longer pressure\n    cardboard_crush: [150, 100, 150, 100],\n    // Multiple crunch sensations\n    electronics_crush: [200, 150, 300, 100],\n    // Complex breaking pattern\n    glass_shatter: [50, 200, 50, 200, 300],\n    // Sharp breaks with resonance\n    plastic_crush: [80, 40, 120],\n    // Soft crushing\n\n    // Satisfaction patterns\n    satisfaction_low: [80, 80, 80],\n    satisfaction_medium: [100, 50, 150, 50, 100],\n    satisfaction_high: [200, 100, 300, 50, 400],\n    // ASMR specific patterns\n    tingle: [30, 50, 30, 50, 30],\n    // Light tingling sensation\n    wave: [50, 30, 100, 30, 150, 30, 100, 30, 50],\n    // Wave-like pattern\n    heartbeat: [120, 500, 120] // Relaxing heartbeat-like\n  };\n\n  // Crush vibration based on object properties\n  const playObjectVibration = (objectType, satisfaction, force = 1.0) => {\n    if (!vibrationEnabled) return;\n\n    // Base pattern from object type\n    let basePattern = asmrPatterns[`${objectType}_crush`] || asmrPatterns.tap;\n\n    // Adjust intensity based on satisfaction and force\n    const intensityMultiplier = Math.max(0.3, satisfaction / 10 * force);\n    vibrate(basePattern, intensityMultiplier);\n  };\n\n  // ASMR enhancement vibrations\n  const playASMRPattern = (patternName, intensity = 1.0) => {\n    if (!vibrationEnabled || !asmrPatterns[patternName]) return;\n    vibrate(asmrPatterns[patternName], intensity);\n  };\n\n  // Success/achievement vibrations\n  const playFeedbackVibration = type => {\n    if (!vibrationEnabled) return;\n    switch (type) {\n      case 'success':\n        vibrate(asmrPatterns.satisfaction_medium, 0.8);\n        break;\n      case 'achievement':\n        vibrate(asmrPatterns.satisfaction_high, 1.0);\n        break;\n      case 'milestone':\n        vibrate([200, 100, 200, 100, 400], 1.0);\n        break;\n      default:\n        vibrate(asmrPatterns.tap, 0.5);\n    }\n  };\n\n  // Ambient ASMR vibrations (very subtle)\n  const startAmbientVibration = () => {\n    if (!vibrationEnabled) return;\n    const ambientInterval = setInterval(() => {\n      if (Math.random() < 0.3) {\n        // 30% chance every few seconds\n        playASMRPattern('tingle', 0.2);\n      }\n    }, 8000 + Math.random() * 4000); // Every 8-12 seconds\n\n    return () => clearInterval(ambientInterval);\n  };\n\n  // Toggle vibration\n  const toggleVibration = () => {\n    setVibrationEnabled(!vibrationEnabled);\n    if (!vibrationEnabled) {\n      // Test vibration when enabled\n      vibrate([100, 50, 100], 0.5);\n    }\n  };\n\n  // Strength adjustment\n  const handleStrengthChange = newStrength => {\n    setVibrationStrength(newStrength);\n\n    // Test vibration with new strength\n    vibrate(asmrPatterns.tap, newStrength);\n  };\n\n  // Expose vibration manager to window for other components\n  useEffect(() => {\n    window.VibrationManager = {\n      playObjectVibration,\n      playASMRPattern,\n      playFeedbackVibration,\n      startAmbientVibration,\n      toggleVibration,\n      setStrength: handleStrengthChange,\n      isEnabled: () => vibrationEnabled,\n      getStrength: () => vibrationStrength,\n      isSupported: () => supportedVibration\n    };\n  }, [vibrationEnabled, vibrationStrength, supportedVibration]);\n\n  // Don't render if vibration is not supported\n  if (!supportedVibration) {\n    return null;\n  }\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed top-4 left-48 z-50\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"card-glass p-3 flex items-center gap-3\",\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: toggleVibration,\n        className: `w-8 h-8 rounded-full flex items-center justify-center transition-all ${vibrationEnabled ? 'bg-purple-500/20 text-purple-400' : 'bg-gray-500/20 text-gray-400'} ${isVibrating ? 'animate-pulse' : ''}`,\n        title: vibrationEnabled ? 'Отключить вибрацию' : 'Включить вибрацию',\n        children: \"\\uD83D\\uDCF3\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 181,\n        columnNumber: 9\n      }, this), vibrationEnabled && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center gap-2\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"range\",\n          min: \"0.1\",\n          max: \"2.0\",\n          step: \"0.1\",\n          value: vibrationStrength,\n          onChange: e => handleStrengthChange(parseFloat(e.target.value)),\n          className: \"w-20 h-2 bg-gray-600 rounded-lg appearance-none cursor-pointer\",\n          style: {\n            background: `linear-gradient(to right, #8b5cf6 0%, #8b5cf6 ${(vibrationStrength - 0.1) / 1.9 * 100}%, #4b5563 ${(vibrationStrength - 0.1) / 1.9 * 100}%, #4b5563 100%)`\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 196,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-xs text-gray-400 w-8\",\n          children: Math.round(vibrationStrength * 100)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 208,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 195,\n        columnNumber: 11\n      }, this), isVibrating && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex items-center gap-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"w-2 h-2 bg-purple-400 rounded-full animate-pulse\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 217,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"span\", {\n          className: \"text-xs text-purple-400\",\n          children: \"buzz\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 218,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 216,\n        columnNumber: 11\n      }, this), vibrationEnabled && /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"flex gap-1\",\n        children: [/*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => playASMRPattern('wave', 0.8),\n          className: \"text-xs px-2 py-1 bg-purple-600/20 hover:bg-purple-600/30 rounded text-purple-300 transition-colors\",\n          title: \"\\u0422\\u0435\\u0441\\u0442 \\u0432\\u043E\\u043B\\u043D\\u043E\\u0432\\u043E\\u0433\\u043E \\u043F\\u0430\\u0442\\u0442\\u0435\\u0440\\u043D\\u0430\",\n          children: \"\\uD83C\\uDF0A\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 225,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: () => playASMRPattern('tingle', 0.6),\n          className: \"text-xs px-2 py-1 bg-pink-600/20 hover:bg-pink-600/30 rounded text-pink-300 transition-colors\",\n          title: \"\\u0422\\u0435\\u0441\\u0442 \\u043F\\u043E\\u043A\\u0430\\u043B\\u044B\\u0432\\u0430\\u043D\\u0438\\u044F\",\n          children: \"\\u2728\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 232,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 224,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 179,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 178,\n    columnNumber: 5\n  }, this);\n};\n_s(VibrationManager, \"m4RPeNVn4HG56v0Ygw0q4ewpk8Y=\");\n_c = VibrationManager;\nexport default VibrationManager;\nvar _c;\n$RefreshReg$(_c, \"VibrationManager\");","map":{"version":3,"names":["React","useEffect","useState","jsxDEV","_jsxDEV","VibrationManager","_s","vibrationEnabled","setVibrationEnabled","vibrationStrength","setVibrationStrength","isVibrating","setIsVibrating","supportedVibration","setSupportedVibration","checkVibrationSupport","hasVibration","navigator","vibrate","error","console","log","pattern","strength","adjustedPattern","Array","isArray","map","duration","index","Math","round","totalDuration","reduce","sum","val","setTimeout","asmrPatterns","tap","pulse","can_crush","cardboard_crush","electronics_crush","glass_shatter","plastic_crush","satisfaction_low","satisfaction_medium","satisfaction_high","tingle","wave","heartbeat","playObjectVibration","objectType","satisfaction","force","basePattern","intensityMultiplier","max","playASMRPattern","patternName","intensity","playFeedbackVibration","type","startAmbientVibration","ambientInterval","setInterval","random","clearInterval","toggleVibration","handleStrengthChange","newStrength","window","setStrength","isEnabled","getStrength","isSupported","className","children","onClick","title","fileName","_jsxFileName","lineNumber","columnNumber","min","step","value","onChange","e","parseFloat","target","style","background","_c","$RefreshReg$"],"sources":["/app/frontend/src/components/VibrationManager.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\n\nconst VibrationManager = () => {\n  const [vibrationEnabled, setVibrationEnabled] = useState(true);\n  const [vibrationStrength, setVibrationStrength] = useState(1.0);\n  const [isVibrating, setIsVibrating] = useState(false);\n  const [supportedVibration, setSupportedVibration] = useState(false);\n\n  // Check vibration API support\n  useEffect(() => {\n    const checkVibrationSupport = () => {\n      const hasVibration = 'vibrate' in navigator;\n      setSupportedVibration(hasVibration);\n      \n      if (hasVibration) {\n        // Test vibration capability\n        try {\n          navigator.vibrate(1); // Very short test vibration\n        } catch (error) {\n          console.log('Vibration API not fully supported');\n          setSupportedVibration(false);\n        }\n      }\n    };\n\n    checkVibrationSupport();\n  }, []);\n\n  // Vibrate function with pattern\n  const vibrate = (pattern, strength = 1.0) => {\n    if (!vibrationEnabled || !supportedVibration || !navigator.vibrate) return;\n\n    setIsVibrating(true);\n    \n    // Adjust pattern intensity based on strength\n    let adjustedPattern;\n    if (Array.isArray(pattern)) {\n      adjustedPattern = pattern.map((duration, index) => {\n        // Even indices are vibration durations, odd are pauses\n        return index % 2 === 0 ? Math.round(duration * strength * vibrationStrength) : duration;\n      });\n    } else {\n      adjustedPattern = Math.round(pattern * strength * vibrationStrength);\n    }\n\n    try {\n      navigator.vibrate(adjustedPattern);\n      \n      // Calculate total duration for state management\n      const totalDuration = Array.isArray(adjustedPattern) \n        ? adjustedPattern.reduce((sum, val) => sum + val, 0)\n        : adjustedPattern;\n        \n      setTimeout(() => setIsVibrating(false), totalDuration);\n    } catch (error) {\n      console.log('Vibration failed:', error);\n      setIsVibrating(false);\n    }\n  };\n\n  // Predefined ASMR vibration patterns\n  const asmrPatterns = {\n    // Light tap sensation\n    tap: [50],\n    \n    // Gentle pulse\n    pulse: [100, 50, 100],\n    \n    // Crushing sensation patterns\n    can_crush: [100, 50, 200], // Quick impact, pause, longer pressure\n    cardboard_crush: [150, 100, 150, 100], // Multiple crunch sensations\n    electronics_crush: [200, 150, 300, 100], // Complex breaking pattern\n    glass_shatter: [50, 200, 50, 200, 300], // Sharp breaks with resonance\n    plastic_crush: [80, 40, 120], // Soft crushing\n    \n    // Satisfaction patterns\n    satisfaction_low: [80, 80, 80],\n    satisfaction_medium: [100, 50, 150, 50, 100],\n    satisfaction_high: [200, 100, 300, 50, 400],\n    \n    // ASMR specific patterns\n    tingle: [30, 50, 30, 50, 30], // Light tingling sensation\n    wave: [50, 30, 100, 30, 150, 30, 100, 30, 50], // Wave-like pattern\n    heartbeat: [120, 500, 120], // Relaxing heartbeat-like\n  };\n\n  // Crush vibration based on object properties\n  const playObjectVibration = (objectType, satisfaction, force = 1.0) => {\n    if (!vibrationEnabled) return;\n\n    // Base pattern from object type\n    let basePattern = asmrPatterns[`${objectType}_crush`] || asmrPatterns.tap;\n    \n    // Adjust intensity based on satisfaction and force\n    const intensityMultiplier = Math.max(0.3, (satisfaction / 10) * force);\n    \n    vibrate(basePattern, intensityMultiplier);\n  };\n\n  // ASMR enhancement vibrations\n  const playASMRPattern = (patternName, intensity = 1.0) => {\n    if (!vibrationEnabled || !asmrPatterns[patternName]) return;\n    \n    vibrate(asmrPatterns[patternName], intensity);\n  };\n\n  // Success/achievement vibrations\n  const playFeedbackVibration = (type) => {\n    if (!vibrationEnabled) return;\n\n    switch (type) {\n      case 'success':\n        vibrate(asmrPatterns.satisfaction_medium, 0.8);\n        break;\n      case 'achievement':\n        vibrate(asmrPatterns.satisfaction_high, 1.0);\n        break;\n      case 'milestone':\n        vibrate([200, 100, 200, 100, 400], 1.0);\n        break;\n      default:\n        vibrate(asmrPatterns.tap, 0.5);\n    }\n  };\n\n  // Ambient ASMR vibrations (very subtle)\n  const startAmbientVibration = () => {\n    if (!vibrationEnabled) return;\n\n    const ambientInterval = setInterval(() => {\n      if (Math.random() < 0.3) { // 30% chance every few seconds\n        playASMRPattern('tingle', 0.2);\n      }\n    }, 8000 + Math.random() * 4000); // Every 8-12 seconds\n\n    return () => clearInterval(ambientInterval);\n  };\n\n  // Toggle vibration\n  const toggleVibration = () => {\n    setVibrationEnabled(!vibrationEnabled);\n    \n    if (!vibrationEnabled) {\n      // Test vibration when enabled\n      vibrate([100, 50, 100], 0.5);\n    }\n  };\n\n  // Strength adjustment\n  const handleStrengthChange = (newStrength) => {\n    setVibrationStrength(newStrength);\n    \n    // Test vibration with new strength\n    vibrate(asmrPatterns.tap, newStrength);\n  };\n\n  // Expose vibration manager to window for other components\n  useEffect(() => {\n    window.VibrationManager = {\n      playObjectVibration,\n      playASMRPattern,\n      playFeedbackVibration,\n      startAmbientVibration,\n      toggleVibration,\n      setStrength: handleStrengthChange,\n      isEnabled: () => vibrationEnabled,\n      getStrength: () => vibrationStrength,\n      isSupported: () => supportedVibration\n    };\n  }, [vibrationEnabled, vibrationStrength, supportedVibration]);\n\n  // Don't render if vibration is not supported\n  if (!supportedVibration) {\n    return null;\n  }\n\n  return (\n    <div className=\"fixed top-4 left-48 z-50\">\n      <div className=\"card-glass p-3 flex items-center gap-3\">\n        {/* Vibration toggle */}\n        <button\n          onClick={toggleVibration}\n          className={`w-8 h-8 rounded-full flex items-center justify-center transition-all ${\n            vibrationEnabled \n              ? 'bg-purple-500/20 text-purple-400' \n              : 'bg-gray-500/20 text-gray-400'\n          } ${isVibrating ? 'animate-pulse' : ''}`}\n          title={vibrationEnabled ? 'Отключить вибрацию' : 'Включить вибрацию'}\n        >\n          📳\n        </button>\n\n        {/* Strength control */}\n        {vibrationEnabled && (\n          <div className=\"flex items-center gap-2\">\n            <input\n              type=\"range\"\n              min=\"0.1\"\n              max=\"2.0\"\n              step=\"0.1\"\n              value={vibrationStrength}\n              onChange={(e) => handleStrengthChange(parseFloat(e.target.value))}\n              className=\"w-20 h-2 bg-gray-600 rounded-lg appearance-none cursor-pointer\"\n              style={{\n                background: `linear-gradient(to right, #8b5cf6 0%, #8b5cf6 ${(vibrationStrength - 0.1) / 1.9 * 100}%, #4b5563 ${(vibrationStrength - 0.1) / 1.9 * 100}%, #4b5563 100%)`\n              }}\n            />\n            <span className=\"text-xs text-gray-400 w-8\">\n              {Math.round(vibrationStrength * 100)}\n            </span>\n          </div>\n        )}\n\n        {/* Currently vibrating indicator */}\n        {isVibrating && (\n          <div className=\"flex items-center gap-1\">\n            <div className=\"w-2 h-2 bg-purple-400 rounded-full animate-pulse\" />\n            <span className=\"text-xs text-purple-400\">buzz</span>\n          </div>\n        )}\n\n        {/* Pattern tester */}\n        {vibrationEnabled && (\n          <div className=\"flex gap-1\">\n            <button\n              onClick={() => playASMRPattern('wave', 0.8)}\n              className=\"text-xs px-2 py-1 bg-purple-600/20 hover:bg-purple-600/30 rounded text-purple-300 transition-colors\"\n              title=\"Тест волнового паттерна\"\n            >\n              🌊\n            </button>\n            <button\n              onClick={() => playASMRPattern('tingle', 0.6)}\n              className=\"text-xs px-2 py-1 bg-pink-600/20 hover:bg-pink-600/30 rounded text-pink-300 transition-colors\"\n              title=\"Тест покалывания\"\n            >\n              ✨\n            </button>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n};\n\nexport default VibrationManager;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}